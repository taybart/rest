{{- /* vim: set ft=gotmpl : */ -}}
func (c Client) {{camelcase .Label}}() (*http.Response, error) {
	req, err := http.NewRequest("{{.Method}}", "{{.URL}}", 
  {{- if .Body -}}
		strings.NewReader(`{{json .Headers .Body}}`)
  {{- else -}}
    nil
  {{- end}})
	if err != nil {
		return nil, err
	}
  {{ if .Headers }}
	{{range $key, $value := .Headers}}
  req.Header.Set("{{ $key }}" , "{{ $value }}")
	{{end}} {{end}}
	{{ if .Cookies }}
	{{range $key, $value := .Cookies}}
	req.AddCookie(&http.Cookie{
		Name:  "{{$key}}",
		Value: "{{$value}}",
	})
  {{end}}{{end}}
	{{ if .Query }}
	query := url.Values{}
	{{range $key, $value := .Query}} query.Add("{{$key}}", "{{$value}}") 
	{{end}} req.URL.RawQuery = query.Encode()
	{{end}}
  res, err := http.DefaultClient.Do(req)
  if err != nil {
    return nil, err
  }
  defer res.Body.Close()
  body, err := io.ReadAll(res.Body)
  if err != nil {
    return nil, err
  }
  fmt.Println(string(body))
  {{ if .Expect.Status }}
  if res.StatusCode != {{.Expect.Status}} {
    return nil, fmt.Errorf("status code %d != %d", res.StatusCode, {{.Expect}})
  }
  {{ end }}
  return res, nil
}
