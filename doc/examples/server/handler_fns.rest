# Server
server {
  address = "localhost:18080"
  handler "POST" "/login" {
    fn = <<LUA
      local body = json.decode(rest.req.body)
      if body.username == "root" and body.password == "toor" then
        local token = uuid.newv4()
        kv.set('last_token', token)
        return 200, json.encode({token = token})
      end
      return 401, json.encode({error = "invalid credentials"})
    LUA
  }
  handler "GET" "/user/{id}" {
    fn = <<LUA
      local token = tools.get_req_header('Authorization')
        :gsub('Bearer ', '')
      if not uuid.is_uuidv4(token) then
        return 401, json.encode({error = "missing credentials"})
      end
      local last_token = kv.get('last_token')
      if last_token ~= token then
        return 401, json.encode({error = "invalid credentials"})
      end
      -- get id from path
      local id = s.path_value("id")
      return 200, json.encode({ id = id, name = "Frankie Muniz" })
    LUA
  }
  # TODO: remove since this is in the other handler example
  handler "GET" "/" {
    response {
      status = 200
      body = read("./doc/examples/server/index.html")
    }
  }
}

## Test Client
request "get auth token" {
  url = "http://localhost:18080/login"
  method = "POST"
  body = { "username": "root", "password": "toor" }
  post_hook = <<LUA
    print('==='..rest.label..'===')
    print(rest.res.body)
    local body = json.decode(rest.res.body)
    if not body.token  then
      fail('no auth_token returned')
      return
    end
    rest.exports.auth_token = body.token
    print('got new auth_token: '..rest.exports.auth_token)
  LUA
}

request "get user" {
  url = "http://localhost:18080/user/5"
  bearer_token = exports.auth_token
  post_hook = <<LUA
    print('\n==='..rest.label..'===')
    inspect.print(json.decode(rest.res.body))
  LUA
}
